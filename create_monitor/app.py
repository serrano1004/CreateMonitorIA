from openai import OpenAI
import requests
import json

client = OpenAI(api_key="")
GRAFANA_API_URL = "http://localhost:3000/api/dashboards/db"  # Reemplaza <GRAFANA_HOST> con la URL de tu Grafana
GRAFANA_API_TOKEN = ""  # Inserta aquí tu token de Grafana

  # Asegúrate de usar tu clave API

from flask import Flask, request, render_template, jsonify

# Configuración de la clave API de OpenAI
  # Reemplaza esto con tu clave API

app = Flask(__name__)

# Función para procesar el prompt con OpenAI
def process_prompt(prompt):
    try:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{
                "role": "system",
                "content": (
                    "You are an expert in Grafana and Prometheus. Given a user request, generate a JSON object compatible with Grafana's API. "
                    "The JSON should include: "
                    "- 'metric': The metric to monitor (e.g., CPU, memory). "
                    "- 'query': The PromQL query for the metric. "
                    "- 'threshold': The threshold value to trigger the alert. "
                    "- 'alert_name': A descriptive name for the alert. "
                    "- 'notification': A dictionary with 'channel_uid' and 'message' for notifications. This field is not mandatory."
                )
            },
            {"role": "user", "content": prompt}],
            max_tokens=200,
            temperature=0.7
        )

        ia_result = response.choices[0].message.content.strip()
        print(f"OpenAI Response: {ia_result}")  # Para depurar

        # Intenta cargar el JSON
        try:
            alert_json = json.loads(ia_result)
            print(f"Alert Json: {alert_json}")  
        except json.JSONDecodeError as e:
            print(f"Error decoding JSON: {e}")
            return {"error": "The JSON generated by OpenAI is invalid."}

        # grafana_result = create_monitor_in_grafana(alert_json)
        # Verifica si el JSON contiene información para V1 o V2
        if all(key in alert_json for key in ["metric", "query", "threshold", "alert_name"]):
            print("Detected V1 format")
            grafana_result = create_monitor_in_grafana(alert_json)
        elif "conditions" in alert_json and "notifications" in alert_json:
            print("Detected V2 format")
            grafana_result = create_monitor_in_grafana_v2(alert_json)
        else:
            return {"error": "The JSON does not contain valid data for Grafana."}


        return grafana_result

    except Exception as e:
        print(f"Error processing prompt with OpenAI: {e}")
        return {"error": f"An error occurred while processing the prompt with OpenAI: {e}"}

def create_monitor_in_grafana(alert_json):
    try:
        # Extract details from the JSON
        metric = alert_json["metric"]
        query = alert_json["query"]
        threshold = alert_json["threshold"]
        alert_name = alert_json["alert_name"]
        notification = alert_json["notification"]

        # Build the Grafana dashboard
        dashboard = {
            "dashboard": {
                "title": f"Dashboard for {metric}",
                "uid": f"dashboard-{metric.lower().replace(' ', '-')}",
                "panels": [
                    {
                        "type": "graph",
                        "title": f"Monitor for {metric}",
                        "datasource": "Prometheus",
                        "targets": [
                            {
                                "expr": query,
                                "refId": "A"
                            }
                        ],
                        "alert": {
                            "name": alert_name,
                            "conditions": [
                                {
                                    "type": "query",
                                    "evaluator": {
                                        "type": "gt",
                                        "params": [threshold]
                                    },
                                    "query": {
                                        "params": ["A"]
                                    },
                                    "reducer": {
                                        "type": "avg"
                                    },
                                    "operator": {
                                        "type": "and"
                                    }
                                }
                            ],
                            "executionErrorState": "alerting",
                            "noDataState": "no_data",
                            "notifications": [
                                {
                                    "uid": notification.get("channel_uid", "C084NGMNUBY"),
                                    "message": notification.get("message", "Default alert message")
                                }
                            ]
                        }
                    }
                ]
            },
            "overwrite": True
        }

        # Enviar el JSON a la API de Grafana
        headers = {
            "Authorization": f"Bearer {GRAFANA_API_TOKEN}",
            "Content-Type": "application/json"
        }

        # response = requests.post(GRAFANA_API_URL, json=dashboard, headers=headers)
        response = requests.post(f"{GRAFANA_API_URL}", json=dashboard, headers=headers)
        print(f"Response from Grafana API: {response.text}")
        response.raise_for_status()
        return {"status": "success", "message": f"Monitor for {metric} created successfully in Grafana."}

    except requests.exceptions.RequestException as e:
        print(f"Error creating monitor in Grafana: {e}")
        return {"status": "error", "message": f"Failed to create monitor in Grafana: {str(e)}"}


def create_monitor_in_grafana_v2(alert_json):
    try:

        # Extract details from the JSON response
        metric = alert_json.get("metric")
        query = alert_json.get("query")
        threshold = alert_json.get("threshold")
        alert_name = alert_json.get("alert_name")
        notification = alert_json.get("notification", {})

        # Validate required fields
        if not all([metric, query, threshold, alert_name]):
            return {"status": "error", "message": "Missing required fields in the alert JSON."}

        if "channel_uid" not in notification or "message" not in notification:
            return {"status": "error", "message": "Notification configuration is incomplete."}

        # Build the Grafana API payload
        dashboard_payload = {
            "dashboard": {
                "title": f"Dashboard for {metric}",
                "uid": f"dashboard-{metric.lower().replace(' ', '-')}",
                "panels": [
                    {
                        "type": "graph",
                        "title": f"Monitor for {metric}",
                        "datasource": "Prometheus",  # Replace if your datasource name is different
                        "targets": [
                            {
                                "expr": query,
                                "refId": "A"
                            }
                        ],
                        "alert": {
                            "name": alert_name,
                            "conditions": [
                                {
                                    "type": "query",
                                    "evaluator": {
                                        "type": "gt",  # Greater than
                                        "params": [threshold]
                                    },
                                    "query": {
                                        "params": ["A"]
                                    },
                                    "reducer": {
                                        "type": "avg"  # Average value over the time window
                                    },
                                    "operator": {
                                        "type": "and"
                                    }
                                }
                            ],
                            "executionErrorState": "alerting",
                            "noDataState": "no_data",
                            "notifications": [
                                {
                                    "uid": notification["channel_uid"],
                                    "message": notification["message"]
                                }
                            ]
                        }
                    }
                ]
            },
            "overwrite": True
        }

        # Enviar la solicitud a la API de Grafana
        headers = {
            "Authorization": f"Bearer {GRAFANA_API_TOKEN}",
            "Content-Type": "application/json"
        }

        response = requests.post(f"{GRAFANA_API_URL}", json=dashboard_payload, headers=headers)
        # Raise an error if the request failed
        response.raise_for_status()
        return {"status": "success", "message": f"Monitor for {metric} created successfully in Grafana."}

    except requests.exceptions.RequestException as e:
        print(f"Error creating monitor in Grafana: {e}")
        return {"status": "error", "message": f"Failed to create monitor in Grafana: {str(e)}"}
    
    except KeyError as ke:
        print(f"Missing key in alert JSON: {ke}")
        return {"status": "error", "message": f"KeyError: Missing key {ke} in alert JSON."}

    except Exception as ex:
        print(f"Unexpected error: {ex}")
        return {"status": "error", "message": f"An unexpected error occurred: {str(ex)}"}


@app.route('/', methods=['GET', 'POST'])
def index():
    if request.method == 'POST':
        prompt = request.form.get('prompt')  # Usa get() para evitar el KeyError
        if prompt:
            result = process_prompt(prompt)  # Llama al servicio de OpenAI para procesar el prompt
            return jsonify(result)  # Devolvemos el JSON con la respuesta procesada
        else:
            return jsonify({"error": "Prompt not received"}), 400

    return render_template('index.html')

if __name__ == '__main__':
    app.run(debug=True)